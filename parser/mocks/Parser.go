// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import ast "github.com/biodebox/yaastr/ast"
import mock "github.com/stretchr/testify/mock"
import parser "github.com/biodebox/yaastr/parser"

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// AddProcessor provides a mock function with given fields: processors
func (_m *Parser) AddProcessor(processors ...parser.Processor) {
	_va := make([]interface{}, len(processors))
	for _i := range processors {
		_va[_i] = processors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Parse provides a mock function with given fields: _a0
func (_m *Parser) Parse(_a0 []byte) (ast.Node, error) {
	ret := _m.Called(_a0)

	var r0 ast.Node
	if rf, ok := ret.Get(0).(func([]byte) ast.Node); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ast.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
